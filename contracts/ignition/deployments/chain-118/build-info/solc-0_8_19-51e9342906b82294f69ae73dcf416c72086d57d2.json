{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_19-51e9342906b82294f69ae73dcf416c72086d57d2",
  "solcVersion": "0.8.19",
  "solcLongVersion": "0.8.19+commit.7dd6d404",
  "userSourceNameMap": {
    "contracts/CLOB.sol": "project/contracts/CLOB.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "paris",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@arcologynetwork/concurrentlib/=npm/@arcologynetwork/concurrentlib@2.2.1/",
        "project/:@arcologynetwork/concurrentlib/=npm/@arcologynetwork/concurrentlib@2.2.1/",
        "project/:@arcologynetwork/concurrentlib/=npm/@arcologynetwork/concurrentlib@2.2.1/",
        "project/:@arcologynetwork/concurrentlib/=npm/@arcologynetwork/concurrentlib@2.2.1/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@4.9.6/"
      ]
    },
    "sources": {
      "npm/@arcologynetwork/concurrentlib@2.2.1/lib/array/Bytes.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"../core/Const.sol\"; \nimport \"../core/Primitive.sol\";\n\n/**\n * @author Arcology Network\n * @title Bytes Concurrent Array\n * @dev The Bytes contract is a concurrent array specialized for storing bytes data.\n *      It inherits from the Base contract to utilize container functionalities for bytes storage.\n */\ncontract Bytes is Base {\n    constructor() Base(Const.BYTES, false){}\n\n    /**\n     * @notice Add a bytes data element to the concurrent array.\n     * @param elem The bytes data element to add to the array.\n     */\n    function push(bytes memory elem) public virtual { \n        Base._set(uuid(), (elem));\n    }    \n\n    /**\n     * @notice Remove and return the last bytes data element from the concurrent array.\n     * @return The last bytes data element from the array.\n     */\n    function delLast() public virtual returns(bytes memory) { \n        return Base._delLast();  \n    }\n\n    /**\n     * @notice Retrieve the bytes data element at the given index from the concurrent array.\n     * @param idx The index of the bytes data element to retrieve.\n     * @return The bytes data element stored at the given index.\n     */\n    function get(uint256 idx) public virtual returns(bytes memory)  { \n        (bool exist,bytes memory data) = Base._get(idx);\n        if(exist)\n            return data;  \n        else{\n            bytes memory tmpData;\n            return tmpData;\n        }\n    }\n\n    /**\n     * @notice Set the bytes data element at the given index in the concurrent array.\n     * @param idx The index where the bytes data element should be stored.\n     * @param elem The bytes data element to be stored at the specified index.\n     */\n    function set(uint256 idx, bytes memory elem) public { \n        Base._set(idx, (elem));\n    }\n}\n"
      },
      "npm/@arcologynetwork/concurrentlib@2.2.1/lib/commutative/U256Cum.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\n/**\n * @author Arcology Network\n * @title U256Cumulative\n * @dev The U256Cumulative contract is an integer designed for cumulative operations in full concurrency. \n * It has both minimum and maximum bounds and allows concurrent delta changes as long as they are not mixed \n * with timing-dependent opeartions like reads ensuring thread safety. It is crucial to note that out-of-limit \n * delta changes will fail to ensure that the variable stays within its prescribed bounds.\n */\ncontract U256Cumulative {\n    address constant public API = address(0x85);    \n\n    /**\n     * @notice Constructor to initialize the U256Cumulative variable with specified minimum and maximum bounds.\n     * @param minv The minimum bound of the cumulative value.\n     * @param maxv The maximum bound of the cumulative value.\n     */\n    constructor (uint256 minv, uint256 maxv) {\n        (bool success,) = address(API).call(abi.encodeWithSignature(\"New(uint256, uint256, uint256)\", minv, maxv));\n        assert(success);\n    }\n\n    /**\n     * @notice Get the current value of the cumulative variable.\n     * @return The current value of the cumulative variable.\n     */\n    function get() public view returns(uint256) {  \n        (bool exist,bytes memory data) = address(API).staticcall(abi.encodeWithSignature(\"get()\"));\n        if(exist)\n            return abi.decode(data, (uint256));\n        else\n            return uint256(0);\n    }\n\n    /**\n     * @notice Add the given value to the cumulative variable.\n     * @param delta The value to be added to the cumulative variable.\n     * @return A boolean indicating the success of the operation.\n     */\n    function add(uint256 delta) public returns(bool) { \n        (bool success,) = address(API).call(abi.encodeWithSignature(\"add(uint256)\", delta));\n        return success; \n    }\n\n    /**\n     * @notice Subtract the given value from the cumulative variable.\n     * @param delta The value to be subtracted from the cumulative variable.\n     * @return A boolean indicating the success of the operation.\n     */\n    function sub(uint256 delta) public returns(bool) { \n        (bool success,) = address(API).call(abi.encodeWithSignature(\"sub(uint256)\", delta));\n        return success;\n    }   \n\n    /**\n     * @notice Get the minimum bound of the cumulative variable.\n     * @return The minimum bound of the cumulative variable.\n     */\n    function min() public view returns(uint256) { \n        (, bytes memory data) = address(API).staticcall(abi.encodeWithSignature(\"min()\"));\n        return abi.decode(data, (uint256));\n    }  \n\n    /**\n     * @notice Get the maximum bound of the cumulative variable.\n     * @return The maximum bound of the cumulative variable.\n     */\n    function max() public view returns(uint256) { \n        (, bytes memory data) = address(API).staticcall(abi.encodeWithSignature(\"max()\"));\n        return abi.decode(data, (uint256));\n    }    \n}\n"
      },
      "npm/@arcologynetwork/concurrentlib@2.2.1/lib/core/Const.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\nimport \"../runtime/Runtime.sol\";\n\nlibrary Const {\n    uint8 public constant U256_CUM = 103; // Cumulative u256\n    uint8 public constant BYTES = 107;\n\n    address public constant CONTAINER_ADDR = address(0x84);\n    address public constant MULTIPROCESSOR_ADDR = address(0xb0);\n}"
      },
      "npm/@arcologynetwork/concurrentlib@2.2.1/lib/core/Gateway.sol": {
        "content": "pragma solidity >=0.7.0;\n\n/**\n * @author Arcology Network\n * @title Gateway Concurrent Container\n * @dev The Gateway contract is a concurrent container designed for concurrent operations,\n *      allowing elements to be added in different processes running in parallel without\n *      causing state conflicts. It provides functionalities for both key-value lookup and\n *      linear access.\n *\n *      The contract serves as a hybrid data structure, functioning as a map set behind the scenes.\n *      The order of elements is formed when any timing-dependent functions like \"delLast()\" or \"nonNilCount()\"\n *      are called. However, performing concurrent \"delLast()\" or getting the length is not recommended in\n *      a parallel environment, as these operations are timing-independent and may lead to conflicts. \n *      Transactions resulting conflicts will be reverted to protect the state consistency.\n *\n *      Delopers should exercise caution when accessing the container concurrently to avoid conflicts.\n */\ncontract Gateway {\n    address public API;\n\n    /**\n     * @notice Constructor to initiate communication with the external contract.\n     */\n    constructor (uint8 typeID , address APIAddr, bool isBlockBound) {\n        API = APIAddr; // Need to set the address for the other functions to work properly.\n        (bool success,) = address(API).call(abi.encodeWithSignature(\n            \"new(uint8,bool)\", uint8(typeID), isBlockBound)); // A false value indicates it is NOT a transient container.\n        require(success);\n    }\n\n    /**\n     * @notice Set the transient state of the container. If the container is transient, it is only\n     *         accessible within the current BLOCK. After the block is finalized, the container will\n     *         be reset automatically.\n     */\n    function markBlockScoped() public returns(uint256) {\n        (,bytes memory data) = eval(abi.encodeWithSignature(\"markBlockScoped()\"));\n        return abi.decode(data, (uint256));\n    } \n\n    function eval(bytes memory command) public returns(bool, bytes memory) {\n        return address(API).call(abi.encodeWithSignature(\"eval(bytes)\", command));  \n    }  \n}\n"
      },
      "npm/@arcologynetwork/concurrentlib@2.2.1/lib/core/Primitive.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\nimport \"../runtime/Runtime.sol\";\nimport \"./Gateway.sol\";\nimport \"./Const.sol\";\n/**\n * @author Arcology Network\n * @title Base Concurrent Container\n * @dev The Base contract is a concurrent container designed for concurrent operations,\n *      allowing elements to be added in different processes running in parallel without\n *      causing state conflicts. It provides functionalities for both key-value lookup and\n *      linear access.\n *\n *      The contract serves as a hybrid data structure, functioning as a map set behind the scenes.\n *      The order of elements is formed when any timing-dependent functions like \"delLast()\" or \"nonNilCount()\"\n *      are called. However, performing concurrent \"delLast()\" or getting the length is not recommended in\n *      a parallel environment, as these operations are timing-independent and may lead to conflicts. \n *      Transactions resulting conflicts will be reverted to protect the state consistency.\n *\n *      Delopers should exercise caution when accessing the container concurrently to avoid conflicts.\n */\ncontract Base is Gateway{    \n    /**\n     * @notice Constructor to initiate communication with the external contract.\n     * @param typeID The type ID of the concurrent container.\n     * @param isBlockBound If true, the content of the container will be cleared after each block.\n     */\n    constructor (uint8 typeID, bool isBlockBound) Gateway(typeID, Const.CONTAINER_ADDR, isBlockBound) {}\n          \n    /**\n     * @notice Retrieve the length of the container, including newly appended and deleted values if any.\n     * @return The length of the container.\n     */\n    function fullLength() public returns(uint256) {\n        (,bytes memory data) = eval(abi.encodeWithSignature(\"fullLength()\"));\n        return abi.decode(data, (uint256));\n    }  \n\n    /**\n     * @notice Retrieve the total number of non nil element in the container.\n     * @return The total number of non-nil values in the container.\n     */\n    function nonNilCount() public returns(uint256) {\n        (,bytes memory data) = eval(abi.encodeWithSignature(\"length()\"));\n        return abi.decode(data, (uint256));\n    }\n     \n    /**\n     * @notice Retrieve the committed length of the container. This usually is the length after previous generation or block.\n     * @dev This function is used to get the length of the container after the last commit. \n     * @return The latest committed length of the container. This is function is thread-safe.\n     */\n    function committedLength() public returns(uint256) {\n        (,bytes memory data) = eval(abi.encodeWithSignature(\"committedLength()\"));\n        if (data.length > 0) {\n            return abi.decode(data, (uint256));   \n        }\n        return 0;    \n    }\n\n    /**\n     * @notice Removes and returns the last element of the container.\n     * @return The data of the removed element.\n     */\n    function _delLast() public virtual returns(bytes memory) {\n        (,bytes memory data) = eval(abi.encodeWithSignature(\"delLast()\"));\n        return data;\n    }\n    \n    /**\n     * @notice Delete the data at the given index in the container.\n     * @param idx The index of the data to be deleted.\n     * @return success true if the data was successfully deleted, false otherwise.\n     */\n    function del(uint256 idx) public virtual returns(bool) {\n        bytes memory key = indToKey(idx);\n        if (key.length == 0) {\n            return false;\n        }\n        return _del(key);\n    }\n    \n    /**\n     * @notice Delete the data associated with the given key from the container.\n     * @param key The key associated with the data to be deleted.\n     * @return success true if the data was successfully deleted, false otherwise.\n     */\n    function _del(bytes memory key) public returns(bool) {\n       (bool success,)  = eval(abi.encodeWithSignature(\"delByKey(bytes)\", key));\n       return success;\n    }\n    \n    /**\n     * @notice Delete all the elements.\n     * @return success true if the all the data was successfully deleted, false otherwise.\n     */\n    function clear() public returns(bool)  {\n        (bool success,)  = eval(abi.encodeWithSignature(\"clear()\"));\n        return success;       \n    }\n\n    /**\n     * @notice Delete all the committed elements. This will not change the length of committedLength() immediately.\n     * @return success true if the all the data was successfully deleted, false otherwise.\n     */\n    function clearCommitted() public returns(bool)  {\n        (bool success,)  = eval(abi.encodeWithSignature(\"clearCommitted()\"));\n        return success;       \n    }\n    \n    /**\n     * @notice Reset the data associated with the key to its default value.\n     * @param key The key associated with the data to be reset.\n     * @return success true if the data was successfully reset, false otherwise.\n     */\n    function _resetByKey(bytes memory key) public returns(bool) {\n       (bool success,) = eval(abi.encodeWithSignature(\"resetByKey(bytes)\", key));\n       return success;\n    }\n\n    /**\n     * @notice Reset the data associated at the index to its default value.\n     * @param idx The index associated with the data to be reset.\n     * @return success true if the data was successfully reset, false otherwise.\n     */\n    function resetByInd(uint256 idx) public returns(bool) {\n       (bool success,) = eval(abi.encodeWithSignature(\"resetByInd(uint256)\", idx));\n       return success;\n    }\n\n    /**\n     * @notice Retrieves the key associated with the given index in the concurrent container.\n     * @param idx The index for which to retrieve the key.\n     * @return The key associated with the given index.\n     */\n    function indToKey(uint256 idx) public returns(bytes memory) {\n        (, bytes memory data) = eval(abi.encodeWithSignature(\"indToKey(uint256)\", idx));\n        return data;  \n    }\n\n    /**\n     * @notice Retrieves the index associated with the given key in the concurrent container.\n     * @param key The key for which to retrieve the index.\n     * @return The index associated with the given key.\n     */\n    function keyToInd(bytes memory key) public returns(uint256) {\n        (, bytes memory data) = eval(abi.encodeWithSignature(\"keyToInd(bytes)\", key));   \n        return abi.decode(data,(uint256));     \n    }\n    \n    /**\n     * @notice Set the data at the given index in the container. It equals to append if the index is the length of the container.\n     * @param idx The index where the data should be stored.\n     * @param encoded The data to be stored.\n     * @return success true if the data was successfully updated, false otherwise.\n     */\n    function _set(uint256 idx, bytes memory encoded) public returns(bool) {\n        bytes memory key = indToKey(idx);\n        if (key.length == 0) {\n            return false;\n        }\n        return _set(key, encoded);\n    }\n\n    /**\n     * @notice Set the data associated with the given key in the container.\n     * @param key The key associated with the data.\n     * @param elem The data to be stored.\n     * @return success true if the data was successfully updated, false otherwise.\n     */\n    function _set(bytes memory key, bytes memory elem) public returns(bool) {\n        (bool success,) = eval(abi.encodeWithSignature(\"setByKey(bytes,bytes)\", key, elem));\n        return success;   \n    }\n\n    /**\n     * @notice Set the data associated with the given key in the container.\n     * @param key The key associated with the data.\n     * @param min The lower bound of the data to be stored.\n     * @param max The upper bound of the data to be stored.\n     * @return success true if the data was successfully updated, false otherwise.\n     */\n    function _init(bytes memory key, bytes memory min, bytes memory max) public returns(bool) {\n        (bool success,) = eval(abi.encodeWithSignature(\"init(bytes,bytes,bytes)\", key, min, max));\n        return success;   \n    }\n    \n    /**\n     * @notice Checks if a key exists in the the data structure. *\n     * @param key The key to check for existence.\n     * @return A boolean indicating whether the key exists in it or not.\n    */\n    function exists(bytes memory key) public returns(bool) {\n        (bool success,) = eval(abi.encodeWithSignature(\"getByKey(bytes)\", key));\n        return success;\n    }\n\n    /**\n     * @notice Checks if the index exists in the the data structure.\n     * @param idx The index to check for existence.\n     * @return A boolean indicating whether the key exists in it or not.\n    */\n    function exists(uint256 idx) public returns(bool) {\n        bytes memory key = indToKey(idx);\n        if (key.length == 0) {\n            return false;\n        }\n        return exists(key);\n    }\n    \n    /**\n     * @notice Retrieve the data at the given index from the container.\n     * @param idx The index of the data to retrieve.\n     * @return The data stored at the specified index.\n     */\n    function _get(uint256 idx) public returns(bool, bytes memory) {\n        return eval(abi.encodeWithSignature(\"getByIndex(uint256)\", idx)); \n    }\n\n    /**\n     * @notice Retrieve the data associated with the given key from the container.\n     * @param key The key associated with the data to retrieve.\n     * @return The data stored at the specified key.\n     */\n    function _get(bytes memory key) public returns(bool, bytes memory)  {\n        return eval(abi.encodeWithSignature(\"getByKey(bytes)\", key));  \n    }\n\n    /**\n     * @notice Retrieve the minimum entry stored in the container sorted by value numerically.\n     * @return encoded The minimum valu and the index.\n     */\n    function _min() public returns(bytes memory)  {\n        (,bytes memory data) = eval(abi.encodeWithSignature(\"min()\"));\n        return data;\n    }\n\n    /**\n     * @notice Retrieve the maximum entry stored in the container sorted by value numerically.\n     * @return The encoded maximum value and the index.\n     */\n    function _max() public returns(bytes memory)  {\n        (,bytes memory data) = eval(abi.encodeWithSignature(\"max()\"));\n        return data;\n    }\n\n    /**\n     * @notice Execute a custom operation on the container's data stored.\n     * @param data Arbitrary data to be used in the custom operation.\n     */\n    function invoke(bytes memory data) public returns(bool, bytes memory) {\n        return address(API).call(abi.encodeWithSignature(\"invoke(bytes)\", data));  \n    }\n\n    /**\n     * @notice Get a pseudo-random UUID from an external contract.\n     * @dev The UUID is a pseudo-random number generated by the external contract.\n     * @return The pseudo-random UUID returned by the external contract.\n     */\n    function uuid() public returns(bytes memory) {\n        return  Runtime.uuid(); \n    }\n}"
      },
      "npm/@arcologynetwork/concurrentlib@2.2.1/lib/map/AddressBoolean.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\nimport \"../core/Const.sol\"; \nimport \"../core/Primitive.sol\";\n\n/**\n * @author Arcology Network\n * @title AddressBooleanMap Contract\n * @dev The map contract provides a simple mapping structure to associate\n *      address keys with boolean values. It inherits from the \"Base\" contract\n *      to utilize container functionalities for key-value storage.\n */\ncontract AddressBooleanMap is Base { \n    constructor() Base(Const.BYTES, false){}\n\n    /**\n     * @notice Check if a given key exists in the map.\n     * @param k The address key to check for existence.\n     * @return true if the key exists, false otherwise.\n     */\n    function exist(address k) public returns(bool) { \n        return Base.exists(abi.encodePacked(k));\n    }\n\n    /**\n     * @notice Set a key-value pair in the map.\n     * @param k The address key to set.\n     * @param value The boolean value associated with the key.\n     */\n    function set(address k, bool value) public { \n        Base._set(abi.encodePacked(k), abi.encode(value));       \n    }\n\n    /**\n     * @notice Get the value associated with a given key in the map.\n     * @param k The address key to retrieve the associated value.\n     * @return The boolean value associated with the key.\n     */\n    function get(address k) public virtual returns(bool){ \n        (bool success, bytes memory data) = Base._get(abi.encodePacked(k));\n        if(success)\n            return (abi.decode(data, (bool))); \n        else\n            return false;   \n    }   \n\n    /**\n     * @notice Get the key based on it index.\n     * @param idx The key to retrieve the associated index.\n     * @return The index key associated with the index.\n     */\n    function keyAt(uint256 idx) public virtual returns(address) {    \n        bytes memory rawdata=Base.indToKey(idx);\n        bytes20 resultAdr;\n        for (uint i = 0; i < 20; i++) {\n            resultAdr |= bytes20(rawdata[i]) >> (i * 8); \n        }\n        return address(uint160(resultAdr));  \n    }   \n\n    /**\n     * @notice Retrieves the value stored at the specified index.\n     * @param idx The index of the element to retrieve.\n     * @return value The value retrieved from the storage array at the given index.    \n    */\n    function valueAt(uint256 idx) public virtual returns(bool){ \n        (bool success,bytes memory data) = Base._get(idx);\n        if(success)\n            return abi.decode(data, (bool));  \n        else\n            return false;\n    }    \n\n    /**\n     * @notice Delete a key-value pair from the map.\n     * @param k The address key to delete.\n     */\n    function del(address k) public { \n        Base._del((abi.encodePacked(k)));  \n    }\n}"
      },
      "npm/@arcologynetwork/concurrentlib@2.2.1/lib/runtime/Runtime.sol": {
        "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.7.0;\n\n/**\n * @author Arcology Network\n * @title Runtime Library\n * @dev The Runtime Library provides runtime information to developers.\n *      It exposes functions to retrieve pseudo-process IDs (PIDs) and pseudo-random UUIDs.\n */\nlibrary Runtime {\n    /**\n     * @notice Get the pseudo-process ID (PID) from an external contract.\n     * @dev The PID is a pseudo-process ID and does not represent a real transaction being processed.\n     * @return args The pseudo-process ID (PID) returned by the external contract.\n     */\n    function pid() internal returns(bytes memory) {\n        (,bytes memory random) = address(0xa0).call(abi.encodeWithSignature(\"pid()\"));     \n        return random;\n    }\n\n    /**\n     * @notice Get a pseudo-random UUID from an external contract.\n     * @dev The UUID is a pseudo-random number generated by the external contract.\n     * @return The pseudo-random UUID returned by the external contract.\n     */\n    function uuid() internal returns(bytes memory) {\n        (,bytes memory id) = address(0xa0).call(abi.encodeWithSignature(\"uuid()\"));     \n        return id;\n    }\n  \n    /**\n     * @notice Call a custom operation.\n     * @return The result of the custom operation.\n     */\n    function eval(string memory func, bytes memory data) internal returns(bool, bytes memory) {\n        return address(0xa0).call(abi.encodeWithSignature(func, data)); \n    }\n\n    /**\n     * @notice Set the max parallelism level for a specific function with respect to other functions.\n     * @param others The list of function signatures and their contract address that can be executed in parallel.\n    */\n   function setParallelism(string memory funcName, address addr, bytes4[] memory others, uint64 parallelism) internal returns(bool) {\n        bytes4 funSign = bytes4(keccak256(bytes(funcName)));\n        (bool success,) = address(0xa0).call(abi.encodeWithSignature(\"setParallelism(bytes4,address,bytes4[],uint64)\", funSign, addr, others, parallelism));\n        return success;\n    }\n \n    /**\n     * @notice Get the number of concurrent instances of the specified function.\n     * @return The number of concurrent instances.\n     */\n    function isInDeferred() internal view returns(bool) {\n        (,bytes memory data) = address(0xa0).staticcall(abi.encodeWithSignature(\"isInDeferred()\"));\n        return abi.decode(data, (bool));  \n    }\n\n    /**\n     * @notice Inform the scheduler that a function needs to schedule a defer call. This function can only be called once in the constructor.\n     * @return The number of concurrent instances.\n     */\n    function defer(string memory funName, uint64 prepaidGas) internal returns(bool) {\n        bytes4 funSign = bytes4(keccak256(bytes(funName)));\n        (bool successful,) = address(0xa0).call(abi.encodeWithSignature(\"defer(bytes4,uint64)\", funSign, prepaidGas));\n        return successful;  \n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/math/Math.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n *\n * IMPORTANT: Deprecated. This storage-based reentrancy guard will be removed and replaced\n * by the {ReentrancyGuardTransient} variant in v6.0.\n *\n * @custom:stateless\n */\nabstract contract ReentrancyGuard {\n    using StorageSlot for bytes32;\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant REENTRANCY_GUARD_STORAGE =\n        0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _reentrancyGuardStorageSlot().getUint256Slot().value = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    /**\n     * @dev A `view` only version of {nonReentrant}. Use to block view functions\n     * from being called, preventing reading from inconsistent contract state.\n     *\n     * CAUTION: This is a \"view\" modifier and does not change the reentrancy\n     * status. Use it only on view functions. For payable or non-payable functions,\n     * use the standard {nonReentrant} modifier instead.\n     */\n    modifier nonReentrantView() {\n        _nonReentrantBeforeView();\n        _;\n    }\n\n    function _nonReentrantBeforeView() private view {\n        if (_reentrancyGuardEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        _nonReentrantBeforeView();\n\n        // Any calls to nonReentrant after this point will fail\n        _reentrancyGuardStorageSlot().getUint256Slot().value = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _reentrancyGuardStorageSlot().getUint256Slot().value = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _reentrancyGuardStorageSlot().getUint256Slot().value == ENTERED;\n    }\n\n    function _reentrancyGuardStorageSlot() internal pure virtual returns (bytes32) {\n        return REENTRANCY_GUARD_STORAGE;\n    }\n}"
      },
      "npm/@openzeppelin/contracts@4.9.6/utils/StorageSlot.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
      },
      "project/contracts/CLOB.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {AddressBooleanMap} from \"@arcologynetwork/concurrentlib/lib/map/AddressBoolean.sol\";\nimport {Bytes} from \"@arcologynetwork/concurrentlib/lib/array/Bytes.sol\";\nimport {U256Cumulative} from \"@arcologynetwork/concurrentlib/lib/commutative/U256Cum.sol\";\nimport {Order} from \"./types/CLOB.sol\";\nimport {Address} from \"./constants/Address.sol\";\nimport {ICLOB} from \"./interfaces/ICLOB.sol\";\n\ncontract CLOB is Ownable, ReentrancyGuard, Address, ICLOB {\n    Bytes private orderBook = new Bytes();\n    U256Cumulative private totalOrders =\n        new U256Cumulative(0, type(uint256).max);\n    Bytes private buyOrders = new Bytes();\n    U256Cumulative private totalbuyOrders =\n        new U256Cumulative(0, type(uint256).max);\n    Bytes private sellOrders = new Bytes();\n    U256Cumulative private totalsellOrders =\n        new U256Cumulative(0, type(uint256).max);\n    mapping(address => Bytes) private userOrders;\n\n    AddressBooleanMap public allowedTokens = new AddressBooleanMap();\n\n    constructor() Ownable() {\n        allowedTokens.set(LAMAL, true);\n        allowedTokens.set(ORIGAMI, true);\n    }\n\n    function _isValidToken(address _token) internal {\n        if (!allowedTokens.get(_token)) {\n            revert TokenNotValid(_token);\n        }\n    }\n\n    function _checkPrice(uint256 amount) internal pure {\n        if (amount == 0) {\n            revert ZeroValue();\n        }\n    }\n\n    function placeOrder(bytes calldata _data) external nonReentrant {\n        Order memory order = abi.decode(_data, (Order));\n        _checkPrice(order.amount.get());\n        _checkPrice(order.price);\n        _isValidToken(order.baseToken);\n        _isValidToken(order.quoteToken);\n\n        orderBook.push(_data);\n        if (order.isBuy) {\n            totalbuyOrders.add(1);\n            buyOrders.push(_data);\n        } else {\n            totalsellOrders.add(1);\n            sellOrders.push(_data);\n        }\n        uint256 newIdx = order.isBuy\n            ? totalbuyOrders.get() - 1\n            : totalsellOrders.get() - 1;\n        _matchOrder(order.isBuy, order, newIdx);\n        userOrders[msg.sender].push(_data);\n    }\n\n    function _matchOrder(bool isBuy, Order memory order, uint256 idx) internal {\n        if (isBuy) {\n            for (uint256 i; i < totalsellOrders.get(); ) {\n                Order memory sellOrder = abi.decode(sellOrders.get(i), (Order));\n                if (\n                    sellOrder.price <= order.price &&\n                    sellOrder.amount.get() > 0 &&\n                    sellOrder.baseToken == order.baseToken &&\n                    sellOrder.quoteToken == order.quoteToken\n                ) {\n                    _fillOrder(idx, i);\n                    sellOrder = abi.decode(sellOrders.get(i), (Order));\n                    if (sellOrder.amount.get() == 0) {\n                        sellOrders.set(\n                            i,\n                            sellOrders.get(totalsellOrders.get() - 1)\n                        );\n                        sellOrders.delLast();\n                        totalsellOrders.sub(1);\n                        totalOrders.sub(1);\n                    } else {\n                        ++i;\n                    }\n                } else {\n                    ++i;\n                }\n            }\n        } else {\n            for (uint256 i; i < totalbuyOrders.get(); ) {\n                Order memory buyOrder = abi.decode(buyOrders.get(i), (Order));\n                if (\n                    buyOrder.price >= order.price &&\n                    buyOrder.amount.get() > 0 &&\n                    buyOrder.baseToken == order.baseToken &&\n                    buyOrder.quoteToken == order.quoteToken\n                ) {\n                    _fillOrder(i, idx);\n                    buyOrder = abi.decode(sellOrders.get(i), (Order));\n                    if (buyOrder.amount.get() == 0) {\n                        buyOrders.set(\n                            i,\n                            buyOrders.get(totalbuyOrders.get() - 1)\n                        );\n                        buyOrders.delLast();\n                        totalbuyOrders.sub(1);\n                        totalOrders.sub(1);\n                    } else {\n                        ++i;\n                    }\n                } else {\n                    ++i;\n                }\n            }\n        }\n    }\n\n    function _fillOrder(uint256 buyOrderIdx, uint256 sellOrderIdx) internal {\n        Order memory buyOrder = abi.decode(buyOrders.get(buyOrderIdx), (Order));\n        Order memory sellOrder = abi.decode(\n            sellOrders.get(sellOrderIdx),\n            (Order)\n        );\n\n        uint256 val = Math.min(buyOrder.amount.get(), sellOrder.amount.get());\n\n        buyOrder.amount.sub(val);\n        sellOrder.amount.sub(val);\n\n        buyOrders.set(buyOrderIdx, abi.encode(buyOrder));\n        sellOrders.set(sellOrderIdx, abi.encode(sellOrder));\n\n        IERC20 baseToken = IERC20(buyOrder.baseToken);\n        IERC20 quoteToken = IERC20(buyOrder.quoteToken);\n\n        if (baseToken.balanceOf(sellOrder.trader) < val) {\n            revert InsufficientBalance(sellOrder.trader, address(baseToken));\n        }\n        if (baseToken.allowance(sellOrder.trader, address(this)) < val) {\n            revert NoAllowance(sellOrder.trader, address(this));\n        }\n        baseToken.transferFrom(sellOrder.trader, buyOrder.trader, val);\n\n        if (quoteToken.balanceOf(buyOrder.trader) < val * sellOrder.price) {\n            revert InsufficientBalance(buyOrder.trader, address(quoteToken));\n        }\n        if (\n            quoteToken.allowance(buyOrder.trader, address(this)) <\n            val * sellOrder.price\n        ) {\n            revert NoAllowance(buyOrder.trader, address(this));\n        }\n        quoteToken.transferFrom(\n            buyOrder.trader,\n            sellOrder.trader,\n            val * sellOrder.price\n        );\n\n        emit OrderFill(buyOrder.trader, sellOrder.trader, val, block.timestamp);\n    }\n\n    function getUserOrders(address user) external returns (bytes[] memory) {\n        Bytes container = userOrders[user];\n        if (address(container) == address(0)) {\n            return new bytes[](0);\n        }\n        uint256 len = container.nonNilCount();\n        bytes[] memory out = new bytes[](len);\n        for (uint256 i; i < len; ++i) {\n            out[i] = container.get(i);\n        }\n        return out;\n    }\n\n    function getAllBuyOrders() external returns (bytes[] memory) {\n        uint256 len = totalbuyOrders.get();\n        bytes[] memory out = new bytes[](len);\n        for (uint256 i; i < len; ++i) {\n            out[i] = buyOrders.get(i);\n        }\n        return out;\n    }\n\n    function getAllSellOrders() external returns (bytes[] memory) {\n        uint256 len = totalsellOrders.get();\n        bytes[] memory out = new bytes[](len);\n        for (uint256 i; i < len; ++i) {\n            out[i] = sellOrders.get(i);\n        }\n        return out;\n    }\n\n    function getAllOrders() external returns (bytes[] memory) {\n        uint256 len = totalOrders.get();\n        bytes[] memory out = new bytes[](len);\n        for (uint256 i; i < len; ++i) {\n            out[i] = orderBook.get(i);\n        }\n        return out;\n    }\n}\n"
      },
      "project/contracts/constants/Address.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract Address {\n    address public constant ORIGAMI = 0x3E1fB648784836d639a50700Cca608F7cD488219;\n    address public constant LAMAL = 0xd2F008D1b27019aa97EdD70da26eca92C83E53d7;\n}"
      },
      "project/contracts/interfaces/ICLOB.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ICLOB {\n    error TokenNotValid(address token);\n    error ZeroValue();\n    error NoAllowance(address owner, address spender);\n    error InsufficientBalance(address user, address token);\n\n    event OrderFill(address buyer, address seller, uint256 amount, uint256 timestamp);\n}"
      },
      "project/contracts/types/CLOB.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\nimport { U256Cumulative } from \"@arcologynetwork/concurrentlib/lib/commutative/U256Cum.sol\";\n\nstruct Order {\n    uint256 id;\n    address trader;\n    address baseToken;      // Token being bought or sold\n    address quoteToken;     // Token used for pricing (e.g., USDC)\n    bool isBuy;             // true = buy order, false = sell order\n    uint256 price;          // price per base token, in quoteToken units\n    U256Cumulative amount;         // total amount of base token desired/offered\n    uint256 timestamp;\n}"
      }
    }
  }
}